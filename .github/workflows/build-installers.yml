name: Build Installers

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., v1.0.0)'
        required: false

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
      
      - name: Generate build info
        run: |
          python build.py --type=installer --platform=windows
      
      - name: Build with PyInstaller
        run: |
          pyinstaller epixnet.spec --distpath dist/windows

      - name: Debug - Check PyInstaller output
        shell: pwsh
        run: |
          Write-Host "Contents of dist/windows/EpixNet:"
          Get-ChildItem -Path "dist\windows\EpixNet" -Force
          Write-Host ""
          Write-Host "Looking for executable..."
          if (Test-Path "dist\windows\EpixNet\EpixNet.exe") {
            Write-Host "Found: EpixNet.exe"
          } elseif (Test-Path "dist\windows\EpixNet\EpixNet") {
            Write-Host "Found: EpixNet (no extension)"
          } else {
            Write-Host "ERROR: Executable not found!"
            Get-ChildItem -Path "dist\windows\EpixNet" -Recurse | Select-Object -First 20
          }

      - name: Flatten PyInstaller output for installer
        shell: pwsh
        run: |
          # Create a flat directory structure for the installer
          # Move all files from _internal to the root level
          $sourceDir = "dist\windows\EpixNet"
          $flatDir = "dist\windows\EpixNet-flat"

          # Create the flat directory
          New-Item -ItemType Directory -Path $flatDir -Force | Out-Null

          # Copy the executable (handle both with and without .exe extension)
          if (Test-Path "$sourceDir\EpixNet.exe") {
            Copy-Item -Path "$sourceDir\EpixNet.exe" -Destination "$flatDir\EpixNet.exe" -Force
            Write-Host "✓ Copied EpixNet.exe"
          } elseif (Test-Path "$sourceDir\EpixNet") {
            Copy-Item -Path "$sourceDir\EpixNet" -Destination "$flatDir\EpixNet.exe" -Force
            Write-Host "✓ Copied EpixNet (renamed to .exe)"
          } else {
            Write-Host "ERROR: Executable not found!"
            exit 1
          }

          # Copy all files from _internal to the root level
          if (Test-Path "$sourceDir\_internal") {
            Write-Host "Copying _internal files..."
            Get-ChildItem -Path "$sourceDir\_internal" -Recurse | ForEach-Object {
              $relativePath = $_.FullName.Substring("$sourceDir\_internal".Length).TrimStart('\')
              $targetPath = Join-Path $flatDir $relativePath

              if ($_.PSIsContainer) {
                New-Item -ItemType Directory -Path $targetPath -Force | Out-Null
              } else {
                New-Item -ItemType Directory -Path (Split-Path $targetPath) -Force | Out-Null
                Copy-Item -Path $_.FullName -Destination $targetPath -Force
              }
            }
          }

          Write-Host "✓ Flattened structure created"
          Get-ChildItem -Path $flatDir | ForEach-Object { Write-Host "  $_" }
          Get-ChildItem -Path $flatDir -Recurse | Measure-Object | ForEach-Object { Write-Host "Total files: $($_.Count)" }

      - name: Install NSIS
        run: choco install nsis -y

      - name: Create Windows installer with NSIS
        shell: cmd
        run: |
          "C:\Program Files (x86)\NSIS\makensis.exe" installer.nsi

      - name: Verify installer was created
        shell: pwsh
        run: |
          $exePath = "dist\installers\EpixNet-windows-x64.exe"
          if (Test-Path $exePath) {
            $exe = Get-Item $exePath
            Write-Host "✓ Installer created successfully"
            Write-Host "  Size: $($exe.Length / 1MB) MB"
            Write-Host "  Path: $($exe.FullName)"
          } else {
            Write-Host "ERROR: Installer not created"
            exit 1
          }
      
      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: dist/installers/EpixNet-windows-x64.exe

  build-macos:
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
      
      - name: Generate build info
        run: |
          python build.py --type=installer --platform=macos
      
      - name: Build with PyInstaller
        run: |
          pyinstaller epixnet.spec --distpath dist/macos
      
      - name: Create macOS DMG
        run: |
          mkdir -p dist/installers
          hdiutil create -volname "EpixNet" -srcfolder dist/macos/EpixNet.app -ov -format UDZO dist/installers/EpixNet-macos.dmg
      
      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-installer
          path: dist/installers/EpixNet-macos.dmg

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libffi-dev python3-dev build-essential libtool
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller
      
      - name: Generate build info
        run: |
          python build.py --type=installer --platform=linux
      
      - name: Build with PyInstaller
        run: |
          pyinstaller epixnet.spec --distpath dist/linux
      
      - name: Create Linux tarball
        run: |
          mkdir -p dist/installers
          cd dist/linux
          tar -czf ../installers/EpixNet-linux-x64.tar.gz EpixNet/
      
      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-installer
          path: dist/installers/EpixNet-linux-x64.tar.gz

  create-release:
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/windows-installer/EpixNet-windows-x64.exe
            artifacts/macos-installer/EpixNet-macos.dmg
            artifacts/linux-installer/EpixNet-linux-x64.tar.gz
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

